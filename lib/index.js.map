{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;QA+BgB,K,GAAA,K;kBAoBQ,M;;AAnDxB;;;;AACA;;;;;;;;AAEA,MAAM,aAAa;AACf,WAAO,qBAAK,KADG;AAEf,SAAK,qBAAK,GAFK;AAGf,WAAO,qBAAK,KAHG;AAIf,YAAQ,qBAAK,MAJE;AAKf,UAAM,qBAAK,IALI;AAMf,aAAS,qBAAK,OANC;AAOf,UAAM,qBAAK,IAPI;AAQf,WAAO,qBAAK,KARG;AASf,UAAM,qBAAK,IATI;;AAWf,aAAS,qBAAK,OAXC;AAYf,WAAO,qBAAK,KAZG;AAaf,aAAS,qBAAK,OAbC;AAcf,cAAU,qBAAK,QAdA;AAef,YAAQ,qBAAK,MAfE;AAgBf,eAAW,qBAAK,SAhBD;AAiBf,YAAQ,qBAAK,MAjBE;AAkBf,aAAS,qBAAK,OAlBC;;AAoBf,UAAM,qBAAK,IApBI;AAqBf,eAAW,qBAAK,SArBD;;;AAwBf,YAAQ,EAAE,MAAM,qBAAK,KAAL,CAAW,OAAX,CAAmB,GAAnB,CAAuB,sCAAgB,MAAvC,CAAR,EAAwD,OAAO,qBAAK,KAAL,CAAW,KAA1E,EAxBO;AAyBf,kBAAc,EAAE,MAAM,qBAAK,KAAL,CAAW,OAAX,CAAmB,GAAnB,CAAuB,sCAAgB,YAAhB,CAAvB,CAAR,EAA+D,OAAO,qBAAK,KAAL,CAAW,KAAjF;AAzBC,CAAnB;;;;;;EA4BO,SAAS,KAAT,CAAe,MAAf,EAAuB,MAAvB,EAA+B;AAClC,QAAI,CAAC,MAAD,IAAW,CAAC,OAAO,MAAnB,IAA6B,CAAC,MAAlC,EAA0C;AACtC,eAAO,MAAP;AACH;;AAED,WAAO,OAAO,MAAP,CAAc,CAAC,MAAD,EAAS,SAAT,KAAuB;AACxC,YAAI,QAAQ,WAAW,SAAX,CAAZ;;AAEA,YAAI,CAAC,KAAL,EAAY;AACR,kBAAM,IAAI,KAAJ,CAAU,CAAC,eAAD,GAAkB,SAAlB,EAA4B,AAA5B,CAAV,CAAN;AACH;;AAED,eAAO,MAAM,IAAN,GAAa,MAAb,GAAsB,MAAM,KAAnC;AACH,KARM,EAQJ,MARI,CAAP;AASH;;;;;;;;;EAMc,SAAS,MAAT,CAAgB,MAAhB,EAAwB;AACnC,WAAO,gDAAqB,MAArB,EAA6B,KAA7B,CAAP;AACH;;;AAGD,OAAO,KAAP,GAAe,KAAf","file":"index.js","sourcesContent":["import ansi from 'ansi-styles';\nimport { styleToHexColor, formatRecordToString } from 'nightingale-formatter';\n\nconst ansiStyles = {\n    black: ansi.black,\n    red: ansi.red,\n    green: ansi.green,\n    yellow: ansi.yellow,\n    blue: ansi.blue,\n    magenta: ansi.magenta,\n    cyan: ansi.cyan,\n    white: ansi.white,\n    gray: ansi.gray,\n\n    bgBlack: ansi.bgBlack,\n    bgRed: ansi.bgRed,\n    bgGreen: ansi.bgGreen,\n    bgYellow: ansi.bgYellow,\n    bgBlue: ansi.bgBlue,\n    bgMagenta: ansi.bgMagenta,\n    bgCyan: ansi.bgCyan,\n    bgWhite: ansi.bgWhite,\n\n    bold: ansi.bold,\n    underline: ansi.underline,\n\n    // http://www.calmar.ws/vim/256-xterm-24bit-rgb-color-chart.html\n    orange: { open: ansi.color.ansi256.hex(styleToHexColor.orange), close: ansi.color.close },\n    'gray-light': { open: ansi.color.ansi256.hex(styleToHexColor['gray-light']), close: ansi.color.close },\n};\n\nexport function style(styles, string) {\n    if (!styles || !styles.length || !string) {\n        return string;\n    }\n\n    return styles.reduce((string, styleName) => {\n        let style = ansiStyles[styleName];\n\n        if (!style) {\n            throw new Error(`Unknown style: ${styleName}`);\n        }\n\n        return style.open + string + style.close;\n    }, string);\n}\n\n/**\n * @param {Object} record\n * @returns {string}\n */\nexport default function format(record) {\n    return formatRecordToString(record, style);\n}\n\n// export style function\nformat.style = style;\n"]}