{"version":3,"sources":["../src/index.js"],"names":["ansi","styleToHexColor","formatRecordToString","ansiStyles","black","red","green","yellow","blue","magenta","cyan","white","gray","bgBlack","bgRed","bgGreen","bgYellow","bgBlue","bgMagenta","bgCyan","bgWhite","bold","underline","orange","open","color","ansi256","hex","close","style","styles","string","length","reduce","styleName","Error","format","record"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,aAAjB;AACA,SAASC,eAAT,EAA0BC,oBAA1B,QAAsD,uBAAtD;;AAEA,MAAMC,aAAa;AACjBC,SAAOJ,KAAKI,KADK;AAEjBC,OAAKL,KAAKK,GAFO;AAGjBC,SAAON,KAAKM,KAHK;AAIjBC,UAAQP,KAAKO,MAJI;AAKjBC,QAAMR,KAAKQ,IALM;AAMjBC,WAAST,KAAKS,OANG;AAOjBC,QAAMV,KAAKU,IAPM;AAQjBC,SAAOX,KAAKW,KARK;AASjBC,QAAMZ,KAAKY,IATM;;AAWjBC,WAASb,KAAKa,OAXG;AAYjBC,SAAOd,KAAKc,KAZK;AAajBC,WAASf,KAAKe,OAbG;AAcjBC,YAAUhB,KAAKgB,QAdE;AAejBC,UAAQjB,KAAKiB,MAfI;AAgBjBC,aAAWlB,KAAKkB,SAhBC;AAiBjBC,UAAQnB,KAAKmB,MAjBI;AAkBjBC,WAASpB,KAAKoB,OAlBG;;AAoBjBC,QAAMrB,KAAKqB,IApBM;AAqBjBC,aAAWtB,KAAKsB,SArBC;;AAuBjB;AACAC,UAAQ,EAAEC,MAAMxB,KAAKyB,KAAL,CAAWC,OAAX,CAAmBC,GAAnB,CAAuB1B,gBAAgBsB,MAAvC,CAAR,EAAwDK,OAAO5B,KAAKyB,KAAL,CAAWG,KAA1E,EAxBS;AAyBjB,gBAAc;AACZJ,UAAMxB,KAAKyB,KAAL,CAAWC,OAAX,CAAmBC,GAAnB,CAAuB1B,gBAAgB,YAAhB,CAAvB,CADM;AAEZ2B,WAAO5B,KAAKyB,KAAL,CAAWG;AAFN;AAzBG,CAAnB;;AA+BA,OAAO,SAASC,KAAT,CAAeC,MAAf,EAAuBC,MAAvB,EAA+B;AACpC,MAAI,CAACD,MAAD,IAAW,CAACA,OAAOE,MAAnB,IAA6B,CAACD,MAAlC,EAA0C;AACxC,WAAOA,MAAP;AACD;;AAED,SAAOD,OAAOG,MAAP,CAAc,CAACF,MAAD,EAASG,SAAT,KAAuB;AAC1C,QAAIL,QAAQ1B,WAAW+B,SAAX,CAAZ;;AAEA,QAAI,CAACL,KAAL,EAAY;AACV,YAAM,IAAIM,KAAJ,CAAW,kBAAiBD,SAAU,EAAtC,CAAN;AACD;;AAED,WAAOL,MAAML,IAAN,GAAaO,MAAb,GAAsBF,MAAMD,KAAnC;AACD,GARM,EAQJG,MARI,CAAP;AASD;;AAED;;;;AAIA,eAAe,SAASK,MAAT,CAAgBC,MAAhB,EAAwB;AACrC,SAAOnC,qBAAqBmC,MAArB,EAA6BR,KAA7B,CAAP;AACD;;AAED;AACAO,OAAOP,KAAP,GAAeA,KAAf","file":"index.js","sourcesContent":["import ansi from 'ansi-styles';\nimport { styleToHexColor, formatRecordToString } from 'nightingale-formatter';\n\nconst ansiStyles = {\n  black: ansi.black,\n  red: ansi.red,\n  green: ansi.green,\n  yellow: ansi.yellow,\n  blue: ansi.blue,\n  magenta: ansi.magenta,\n  cyan: ansi.cyan,\n  white: ansi.white,\n  gray: ansi.gray,\n\n  bgBlack: ansi.bgBlack,\n  bgRed: ansi.bgRed,\n  bgGreen: ansi.bgGreen,\n  bgYellow: ansi.bgYellow,\n  bgBlue: ansi.bgBlue,\n  bgMagenta: ansi.bgMagenta,\n  bgCyan: ansi.bgCyan,\n  bgWhite: ansi.bgWhite,\n\n  bold: ansi.bold,\n  underline: ansi.underline,\n\n  // http://www.calmar.ws/vim/256-xterm-24bit-rgb-color-chart.html\n  orange: { open: ansi.color.ansi256.hex(styleToHexColor.orange), close: ansi.color.close },\n  'gray-light': {\n    open: ansi.color.ansi256.hex(styleToHexColor['gray-light']),\n    close: ansi.color.close,\n  },\n};\n\nexport function style(styles, string) {\n  if (!styles || !styles.length || !string) {\n    return string;\n  }\n\n  return styles.reduce((string, styleName) => {\n    let style = ansiStyles[styleName];\n\n    if (!style) {\n      throw new Error(`Unknown style: ${styleName}`);\n    }\n\n    return style.open + string + style.close;\n  }, string);\n}\n\n/**\n * @param {Object} record\n * @returns {string}\n */\nexport default function format(record) {\n  return formatRecordToString(record, style);\n}\n\n// export style function\nformat.style = style;\n"]}