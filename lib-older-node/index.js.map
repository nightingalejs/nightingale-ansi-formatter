{"version":3,"sources":["../src/index.js"],"names":["style","format","ansiStyles","black","red","green","yellow","blue","magenta","cyan","white","gray","bgBlack","bgRed","bgGreen","bgYellow","bgBlue","bgMagenta","bgCyan","bgWhite","bold","underline","orange","open","color","ansi256","hex","close","styles","string","length","reduce","styleName","Error","record"],"mappings":";;;;;QA+BgBA,K,GAAAA,K;kBAoBQC,M;;AAnDxB;;;;AACA;;;;AAEA,IAAMC,aAAa;AACjBC,SAAO,qBAAKA,KADK;AAEjBC,OAAK,qBAAKA,GAFO;AAGjBC,SAAO,qBAAKA,KAHK;AAIjBC,UAAQ,qBAAKA,MAJI;AAKjBC,QAAM,qBAAKA,IALM;AAMjBC,WAAS,qBAAKA,OANG;AAOjBC,QAAM,qBAAKA,IAPM;AAQjBC,SAAO,qBAAKA,KARK;AASjBC,QAAM,qBAAKA,IATM;;AAWjBC,WAAS,qBAAKA,OAXG;AAYjBC,SAAO,qBAAKA,KAZK;AAajBC,WAAS,qBAAKA,OAbG;AAcjBC,YAAU,qBAAKA,QAdE;AAejBC,UAAQ,qBAAKA,MAfI;AAgBjBC,aAAW,qBAAKA,SAhBC;AAiBjBC,UAAQ,qBAAKA,MAjBI;AAkBjBC,WAAS,qBAAKA,OAlBG;;AAoBjBC,QAAM,qBAAKA,IApBM;AAqBjBC,aAAW,qBAAKA,SArBC;;AAuBf;AACFC,UAAQ,EAAEC,MAAM,qBAAKC,KAAL,CAAWC,OAAX,CAAmBC,GAAnB,CAAuB,sCAAgBJ,MAAvC,CAAR,EAAwDK,OAAO,qBAAKH,KAAL,CAAWG,KAA1E,EAxBS;AAyBjB,gBAAc,EAAEJ,MAAM,qBAAKC,KAAL,CAAWC,OAAX,CAAmBC,GAAnB,CAAuB,sCAAgB,YAAhB,CAAvB,CAAR,EAA+DC,OAAO,qBAAKH,KAAL,CAAWG,KAAjF;AAzBG,CAAnB;;AA4BO,SAAS3B,KAAT,CAAe4B,MAAf,EAAuBC,MAAvB,EAA+B;AACpC,MAAI,CAACD,MAAD,IAAW,CAACA,OAAOE,MAAnB,IAA6B,CAACD,MAAlC,EAA0C;AACxC,WAAOA,MAAP;AACD;;AAED,SAAOD,OAAOG,MAAP,CAAc,UAACF,MAAD,EAASG,SAAT,EAAuB;AAC1C,QAAIhC,QAAQE,WAAW8B,SAAX,CAAZ;;AAEA,QAAI,CAAChC,KAAL,EAAY;AACV,YAAM,IAAIiC,KAAJ,qBAA4BD,SAA5B,CAAN;AACD;;AAED,WAAOhC,MAAMuB,IAAN,GAAaM,MAAb,GAAsB7B,MAAM2B,KAAnC;AACD,GARM,EAQJE,MARI,CAAP;AASD;;AAED;;;;AAIe,SAAS5B,MAAT,CAAgBiC,MAAhB,EAAwB;AACrC,SAAO,gDAAqBA,MAArB,EAA6BlC,KAA7B,CAAP;AACD;;AAED;AACAC,OAAOD,KAAP,GAAeA,KAAf","file":"index.js","sourcesContent":["import ansi from 'ansi-styles';\nimport { styleToHexColor, formatRecordToString } from 'nightingale-formatter';\n\nconst ansiStyles = {\n  black: ansi.black,\n  red: ansi.red,\n  green: ansi.green,\n  yellow: ansi.yellow,\n  blue: ansi.blue,\n  magenta: ansi.magenta,\n  cyan: ansi.cyan,\n  white: ansi.white,\n  gray: ansi.gray,\n\n  bgBlack: ansi.bgBlack,\n  bgRed: ansi.bgRed,\n  bgGreen: ansi.bgGreen,\n  bgYellow: ansi.bgYellow,\n  bgBlue: ansi.bgBlue,\n  bgMagenta: ansi.bgMagenta,\n  bgCyan: ansi.bgCyan,\n  bgWhite: ansi.bgWhite,\n\n  bold: ansi.bold,\n  underline: ansi.underline,\n\n    // http://www.calmar.ws/vim/256-xterm-24bit-rgb-color-chart.html\n  orange: { open: ansi.color.ansi256.hex(styleToHexColor.orange), close: ansi.color.close },\n  'gray-light': { open: ansi.color.ansi256.hex(styleToHexColor['gray-light']), close: ansi.color.close },\n};\n\nexport function style(styles, string) {\n  if (!styles || !styles.length || !string) {\n    return string;\n  }\n\n  return styles.reduce((string, styleName) => {\n    let style = ansiStyles[styleName];\n\n    if (!style) {\n      throw new Error(`Unknown style: ${styleName}`);\n    }\n\n    return style.open + string + style.close;\n  }, string);\n}\n\n/**\n * @param {Object} record\n * @returns {string}\n */\nexport default function format(record) {\n  return formatRecordToString(record, style);\n}\n\n// export style function\nformat.style = style;\n"]}